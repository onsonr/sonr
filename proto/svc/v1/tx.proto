syntax = "proto3";
package svc.v1;

import "cosmos/msg/v1/msg.proto";
import "svc/v1/genesis.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/sonr-io/snrd/x/svc/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a governance operation for updating the parameters.
  //
  // Since: cosmos-sdk 0.47
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // RegisterService initializes a Service with a given permission scope and
  // URI. The domain must have a valid TXT record containing the public key.
  rpc RegisterService(MsgRegisterService) returns (MsgRegisterServiceResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}

// MsgRegisterService is the message type for the RegisterService RPC.
message MsgRegisterService {
  option (cosmos.msg.v1.signer) = "controller";

  // authority is the address of the governance account.
  string controller = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // origin is the origin of the request in wildcard form. Requires valid TXT
  // record in DNS.
  Service service = 2;
}

// MsgRegisterServiceResponse is the response type for the RegisterService RPC.
message MsgRegisterServiceResponse {
  bool success = 1;
  string did = 2;
}
