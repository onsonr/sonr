syntax = "proto3";

package did.v1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "did/v1/genesis.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/onsonr/sonr/x/did/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // ExecuteTx executes a transaction on the Sonr Blockchain. It leverages
  // Macaroon for verification.
  rpc ExecuteTx(MsgExecuteTx) returns (MsgExecuteTxResponse);

  // RegisterController initializes a controller with the given authentication
  // set, address, cid, publicKey, and user-defined alias.
  rpc RegisterController(MsgRegisterController) returns (MsgRegisterControllerResponse);

  // UpdateParams defines a governance operation for updating the parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgRegisterController is the message type for the InitializeController RPC.
message MsgRegisterController {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Assertions is the list of assertions to initialize the controller with.
  repeated bytes assertions = 2;

  // Keyshares is the list of keyshares to initialize the controller with.
  repeated bytes keyshares = 3;

  // Verifications is the list of verifications to initialize the controller
  // with.
  repeated bytes verifications = 4;
}

// MsgRegisterControllerResponse is the response type for the
// InitializeController RPC.
message MsgRegisterControllerResponse {
  // Success returns true if the specified cid is valid and not already
  // encrypted.
  bool success = 1;

  // Controller is the address of the initialized controller.
  string controller = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Accounts are a Address Map and Supported coin Denoms for the controller
  map<string, string> accounts = 3;
}

// MsgExecuteTx is the message type for the ExecuteTx RPC.
message MsgExecuteTx {
  option (cosmos.msg.v1.signer) = "controller";

  // Controller is the address of the controller to authenticate.
  string controller = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Messages is the list of messages to execute.
  map<string, bytes> messages = 2;

  // MacaroonToken is the macaroon token to authenticate the operation.
  string macaroon_token = 3;
}

// MsgExecuteTxResponse is the response type for the ExecuteTx RPC.
message MsgExecuteTxResponse {
  bool success = 1;
  string tx_hash = 2;
}

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the parameters to update.
  Params params = 2 [(gogoproto.nullable) = false];

  // token is the macron token to authenticate the operation.
  string token = 3;
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}
