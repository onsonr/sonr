open module ipfs.net.Config

API: API

Addresses: Addresses

AutoNAT: Dynamic

Bootstrap: Listing

DNS: DNS

Datastore: Datastore

Discovery: Discovery

Experimental: Experimental

Gateway: Gateway

Identity: Identity

Internal: Dynamic

Ipns: Ipns

Migration: Migration

Mounts: Mounts

Peering: Peering

Pinning: Pinning

Plugins: Plugins

Provider: Provider

Pubsub: Pubsub

Reprovider: Reprovider

Routing: Routing

Swarm: Swarm

class API {
  HTTPHeaders: HTTPHeaders
}

class HTTPHeaders {
  `Access-Control-Allow-Origin`: Listing
}

class Addresses {
  API: String

  Announce: Listing<Any>

  AppendAnnounce: Listing<Any>

  Gateway: String

  NoAnnounce: Listing<Any>

  Swarm: Listing
}

class DNS {
  Resolvers: Dynamic
}

class Datastore {
  BloomFilterSize: Int

  GCPeriod: String

  HashOnRead: Boolean

  Spec: Spec

  StorageGCWatermark: Int

  StorageMax: String
}

class Spec {
  mounts: Listing

  type: String
}

class MountsItem0 {
  child: Child

  mountpoint: String

  prefix: String

  type: String
}

class Child {
  path: String

  shardFunc: String

  sync: Boolean

  type: String
}

class MountsItem1 {
  child: MountsItem1Child

  mountpoint: String

  prefix: String

  type: String
}

class MountsItem1Child {
  compression: String

  path: String

  type: String
}

class Discovery {
  MDNS: MDNS
}

class MDNS {
  Enabled: Boolean
}

class Experimental {
  AcceleratedDHTClient: Boolean

  FilestoreEnabled: Boolean

  GraphsyncEnabled: Boolean

  Libp2pStreamMounting: Boolean

  P2pHttpProxy: Boolean

  StrategicProviding: Boolean

  UrlstoreEnabled: Boolean
}

class Gateway {
  APICommands: Listing<Any>

  HTTPHeaders: GatewayHTTPHeaders

  NoDNSLink: Boolean

  NoFetch: Boolean

  PathPrefixes: Listing<Any>

  PublicGateways: Any

  RootRedirect: String

  Writable: Boolean
}

class GatewayHTTPHeaders {
  `Access-Control-Allow-Headers`: Listing

  `Access-Control-Allow-Methods`: Listing

  `Access-Control-Allow-Origin`: Listing
}

class Identity {
  PeerID: String

  PrivKey: String
}

class Ipns {
  RecordLifetime: String

  RepublishPeriod: String

  ResolveCacheSize: Int
}

class Migration {
  DownloadSources: Listing<Any>

  Keep: String
}

class Mounts {
  FuseAllowOther: Boolean

  IPFS: String

  IPNS: String
}

class Peering {
  Peers: Listing
}

class PeersItem11 {
  Addrs: Listing

  ID: String
}

class Pinning {
  RemoteServices: Dynamic
}

class Plugins {
  Plugins: Any
}

class Provider {
  Strategy: String
}

class Pubsub {
  DisableSigning: Boolean

  Router: String
}

class Reprovider {
  Interval: String

  Strategy: String
}

class Routing {
  Methods: Any

  Routers: Any

  Type: String
}

class Swarm {
  AddrFilters: Any

  ConnMgr: Dynamic

  DisableBandwidthMetrics: Boolean

  DisableNatPortMap: Boolean

  RelayClient: Dynamic

  RelayService: Dynamic

  ResourceMgr: Dynamic

  Transports: Transports
}

class Transports {
  Multiplexers: Dynamic

  Network: Dynamic

  Security: Dynamic
}
